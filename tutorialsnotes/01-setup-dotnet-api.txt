/*
TUTORIAL:
STEP 1: CREATE A WEB API WITH ASP.NET CORE
https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-8.0&tabs=visual-studio

PREREQUISITES:
A. .NET SDK (Download from dotnet.microsoft.com)
B. A code editor like Visual Studio or Visual Studio Code.

QUICK REFERENCE:
To rebuild and run a project: dotnet build ; dotnet run
To (set up the database and) run migrations: dotnet ef migrations (add InitialCreate) ; dotnet ef database update

PRACTICE: CREATE THE WEB PROJECT
1. Open the integrated terminal.
2. Change directories (cd) to the folder that will contain the project folder.
3. Run the following commands: 
A. dotnet new webapi --use-controllers -o [projectname] (Create a new web API project and open it in Visual Studio Code.)
B. (ChatGPT:) dotnet new webapi -n [projectname]
C. cd [projectname]
D. code -r ../[projectname] : Open the [projectname] folder in the current instance of Visual Studio Code.
4. Visual Studio Code might display a dialog box that asks: Do you trust the authors of the files in this folder?
A. If you trust all files in the parent folder, select Trust the authors of all files in the parent folder.
B. Select Yes, I trust the authors since the project folder has files generated by .NET.
C. When Visual Studio Code requests that you add assets to build and debug the project, select Yes.
D. If Visual Studio Code doesn't offer to add build and debug assets, select View > Command Palette and type ".NET" into the search box.
E. From the list of commands, select the .NET: Generate Assets for Build and Debug command.
F. Visual Studio Code adds a .vscode folder with generated launch.json and tasks.json files.
G. NOTE: For guidance on adding packages to .NET apps, see the articles under Install and manage packages at Package consumption workflow (NuGet documentation).
H. Confirm correct package versions at NuGet.org.

CONFIGURE DATABASE
C. **SQLITE: Add SQLite NuGet Packages: Install the required SQLite and Entity Framework Core packages:
I. dotnet add package Microsoft.EntityFrameworkCore.Sqlite
II. dotnet add package Microsoft.EntityFrameworkCore.Tools
D. IN MEMORY: dotnet add package Microsoft.EntityFrameworkCore.InMemory (Add a NuGet package that is needed for the next section.)
[ALSO SEE Database instructions in 0x-setup-model.api; e.g.,:]
dotnet ef migrations add InitialCreate
dotnet ef database update

[IF NOT ALREADY DONE, CONFIGURE SWAGGERUI - SEE tutorialsnotes/01A-setup-swaggerui.txt]

TEST THE WEATHERFORECAST PROJECT
5. Test the project:
A. The project template creates a WeatherForecast API with support for Swagger.
B. Trust the HTTPS development certificate by running the following command:
I. dotnet dev-certs https --trust
II. The preceding command requires .NET 9 SDK or later on Linux.
III. For Linux on .NET 8.0.401 SDK and earlier, see your Linux distribution's documentation for trusting a certificate.
IV. The preceding command displays the following dialog, provided the certificate was not previously trusted: [Security warning dialog]
C. Select Yes if you agree to trust the development certificate.
D. For more information, see the Trust the ASP.NET Core HTTPS development certificate section of the Enforcing SSL article.
E. For information on trusting the Firefox browser, see Firefox SEC_ERROR_INADEQUATE_KEY_USAGE certificate error.
6. Run the app:
A. Run the following command to start the app on the https profile: dotnet run --launch-profile https
i. The output shows messages similar to the following, indicating that the app is running and awaiting requests: [Output]:
...
info: Microsoft.Hosting.Lifetime[14]
      Now listening on: https://localhost:{port}
...
B. Ctrl+click the HTTPS URL in the output to test the web app in a browser.
C. The default browser is launched to https://localhost:<port>/swagger/index.html, where <port> is the randomly chosen port number displayed in the output.
D. There's no endpoint at https://localhost:<port>, so the browser returns HTTP 404 Not Found.
E. Append /swagger to the URL, https://localhost:<port>/swagger.
F. The Swagger page /swagger/index.html is displayed. Select GET > Try it out > Execute. The page displays:
i. The Curl command to test the WeatherForecast API.
ii. The URL to test the WeatherForecast API.
iii. The response code, body, and headers.
iv. A drop-down list box with media types and the example value and schema.
G. If the Swagger page doesn't appear, see this GitHub issue.
H. Swagger is used to generate useful documentation and help pages for web APIs.
I. This tutorial uses Swagger to test the app.
J. For more information on Swagger, see ASP.NET Core web API documentation with Swagger / OpenAPI.
[Alternatively:]
K. Copy and paste the Request URL in the browser: https://localhost:<port>/weatherforecast
L. JSON similar to the following example is returned:
[
    {
        "date": "2019-07-16T19:04:05.7257911-06:00",
        "temperatureC": 52,
        "temperatureF": 125,
        "summary": "Mild"
    },
    {
        "date": "2019-07-17T19:04:05.7258461-06:00",
        "temperatureC": 36,
        "temperatureF": 96,
        "summary": "Warm"
    },
    {
        "date": "2019-07-18T19:04:05.7258467-06:00",
        "temperatureC": 39,
        "temperatureF": 102,
        "summary": "Cool"
    },
    {
        "date": "2019-07-19T19:04:05.7258471-06:00",
        "temperatureC": 10,
        "temperatureF": 49,
        "summary": "Bracing"
    },
    {
        "date": "2019-07-20T19:04:05.7258474-06:00",
        "temperatureC": -1,
        "temperatureF": 31,
        "summary": "Chilly"
    }
]
M. After testing the web app in the following instruction, press Ctrl+C in the integrated terminal to shut it down.
N. PROCEED TO STEP 2: ADD A MODEL CLASS ...

THEORY:
In this article: Overview; Prerequisites; Create a web project; Add a NuGet package

This tutorial teaches the basics of building a controller-based web API that uses a database.
Another approach to creating APIs in ASP.NET Core is to create minimal APIs.
For help with choosing between minimal APIs and controller-based APIs, see APIs overview.
For a tutorial on creating a minimal API, see Tutorial: Create a minimal API with ASP.NET Core.

Overview: This tutorial     creates the following API:
API                         Description                 Request body    Response body
GET /api/todoitems 	        Get all to-do items 	    None 	        Array of to-do items
GET /api/todoitems/{id}     Get an item by ID 	        None 	        To-do item
POST /api/todoitems 	    Add a new item 	            To-do item 	    To-do item
PUT /api/todoitems/{id} 	Update an existing item     To-do item 	    None
DELETE /api/todoitems/{id}  Delete an item     	        None 	        None

The following diagram shows the design of the app: [See tutorial]
-The client is represented by a box on the left.
-It submits a request and receives a response from the application, a box drawn on the right.
-Within the application box, three boxes represent the controller, the model, and the data access layer.
-The request comes into the application's controller, and read/write operations occur between the controller and the data access layer.
-The model is serialized and returned to the client in the response.

Prerequisites: Visual Studio Code; C# for Visual Studio Code (latest version); .NET 8.0 SDK
The Visual Studio Code instructions use the .NET CLI for ASP.NET Core development functions such as project creation.
You can follow these instructions on macOS, Linux, or Windows and with any code editor.
Minor changes may be required if you use something other than Visual Studio Code.

(ChatGPT:) Creating a web API with ASP.NET Core and a SQLite database involves several steps.
[Above] is a step-by-step guide to build this project.
*/
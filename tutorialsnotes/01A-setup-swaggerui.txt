/*
SETUP FOR SWAGGER-UI (CHAT GPT RESPONSE ...)
THEORY:
If you are getting a blank page when accessing https://localhost:5001/swagger,
it may indicate that Swagger UI isn't properly set up in your application.

PRACTICE:
HOW TO TROUBLESHOOT AND ENSURE SWAGGER IS INSTALLED AND CONFIGURED PROPERLY:
UPDATE PROGRAM.CS:
1. Add the Swagger NuGet Package
A. Ensure you have the necessary Swagger packages installed. Run:
B. dotnet add package Swashbuckle.AspNetCore
2. Configure Swagger in Program.cs
A. Update Program.cs to include the correct Swagger setup.
B. Ensure you have added Swagger services and middleware:
C. In Program.cs, Add Swagger Services: builder.Services.AddSwaggerGen(); ...
D. AFTER after var builder = WebApplication.CreateBuilder(args); AND BEFORE var "var app = builder.Build();"

CONFIGURE MIDDLEWARE
E. Configure Middleware for Swagger: Make sure Swagger middleware is included in the pipeline.
F. Replace the existing Swagger configuration with this:
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
        c.RoutePrefix = string.Empty; // Set Swagger UI at the app's root
    });
}
 
ANNOTATE API CONTROLLERS:
3. Ensure API Controllers are Properly Annotated
A. Swagger relies on discovering your controllers and API actions. Ensure:
B. All controllers use the [ApiController] attribute: Example:
[ApiController]
[Route("api/[controller]")]
public class TodoItemsController : ControllerBase
C. Action methods use appropriate HTTP attributes ([HttpGet], [HttpPost], etc.).

VERIFY LAUNCHSETTINGS.JSON
4. Verify launchSettings.json (Optional)
A. Check that your launchSettings.json has the correct launch URL:
B. Open the file in the Properties folder. (e.g., /Properties/launchSettings.json)
C. Ensure the launchUrl includes swagger for profiles like IIS Express or Project:
"profiles": {
    "IIS Express": {
        "launchBrowser": true,
        "launchUrl": "swagger",
        "applicationUrl": "http://localhost:5000;https://localhost:5001",
        "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
        }
    },
    "AspNetCoreSQLiteApi": {
        "commandName": "Project",
        "launchBrowser": true,
        "launchUrl": "swagger",
        "applicationUrl": "http://localhost:5000;https://localhost:5001",
        "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
        }
    }
}

REBUILD AND RUN
5. Rebuild and Run
A. Rebuild your application:
B. dotnet build
C. Run the application:
D. dotnet run

DEBUG ISSUES
6. Debug Issues
A. If https://localhost:5001/swagger still shows a blank page:
I. Check the console logs in your browser's developer tools for any errors.
II. Inspect the network tab to see if the Swagger JSON (swagger/v1/swagger.json) is loading properly.
III. Test accessing the Swagger JSON directly:
IV. Visit https://localhost:5001/swagger/v1/swagger.json.
V. If it returns valid JSON, the API is functioning, but the Swagger UI might be misconfigured.

OPTIONAL ENHANCEMENTS
7. Optional Enhancements
A. Add comments to controllers for better Swagger documentation:
B. Enable XML documentation in your project:
C. Open the .csproj file and add:
<PropertyGroup>
  <GenerateDocumentationFile>true</GenerateDocumentationFile>
</PropertyGroup>
8. Add comments to your controllers:
/// <summary>
/// Gets all todo items.
/// </summary>
[HttpGet]
public async Task<ActionResult<IEnumerable<TodoItem>>> GetTodoItems() { ... }
9. Modify the Swagger configuration to include comments:
builder.Services.AddSwaggerGen(c =>
{
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    c.IncludeXmlComments(xmlPath);
});
10. This should resolve the blank page issue and provide you with a functional Swagger UI at https://localhost:5001/swagger.
[Let me know if you encounter further problems!]
*/
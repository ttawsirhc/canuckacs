CORS HEADERS ERROR:
THEORY:
I'm trying to access a .net mvc (C#) api built in visual studio code, using axios in angular, and got this error:
Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://localhost:5062/api/Tags.
(Reason: CORS header ‘Access-Control-Allow-Origin’ missing). Status code: 200.

This error occurs because the browser's Same-Origin Policy blocks requests to your .NET MVC API
unless the server explicitly allows requests from the origin of your Angular application.
The error is related to CORS (Cross-Origin Resource Sharing).
By using either the [EnableCors] attribute or globally applying CORS middleware,
you can effectively manage CORS behavior in your .NET MVC API.

PRACTICE:
1. Here’s how you can resolve the issue: (Steps to Enable CORS in .NET MVC API):

INSTALL THE CORS MIDDLEWARE
2. In your .NET Core MVC project, you need to add CORS middleware to allow requests from your Angular application.
A. Install the Microsoft.AspNetCore.Cors package (if not already installed) via NuGet:
B. dotnet add package Microsoft.AspNetCore.Cors

HANDLE CORS HEADERS AT THE GLOBAL LEVEL (ChatGPT said:)
3. To update a controller in Visual Studio Code to change the CORS headers, you typically: (Here’s how to do it step-by-step:)
A. ... handle this at a global level (in Startup.cs or Program.cs) rather than modifying individual controllers.
4. Add CORS Headers Globally (Recommended)
5. If not already configured, follow these steps:
A. Update Startup.cs (or Program.cs for .NET 6+):
B. Define a CORS Policy:
services.AddCors(options =>
{
    options.AddPolicy("AllowSpecificOrigin", builder =>
    {
        builder.WithOrigins("http://localhost:4200") // Replace with your Angular app's origin
               .AllowAnyHeader()
               .AllowAnyMethod();
    });
});
C. Use the CORS Policy in Middleware:
app.UseCors("AllowSpecificOrigin");
D. Restart your API and test - below. (dotnet build ; dotnet run ?)

ADDITIONAL DETAILS
6. Check the API Controller:
A. Ensure your controller uses the [ApiController] attribute and that the endpoint matches your Angular app's request. For example:

[ApiController]
[Route("api/[controller]")]
public class TagsController : ControllerBase
{
    [HttpGet]
    public IActionResult GetTags()
    {
        return Ok(new string[] { "Tag1", "Tag2", "Tag3" });
    }
}
B. Test the API: Restart your .NET API and test it using a tool like [Swagger AI, ] Postman or your Angular app.
7. Angular Axios Configuration
A. Make sure your Angular application is correctly pointing to the API and that the headers
B. ... in your Axios request match what the API allows. Example:
import axios from 'axios';

axios.get('http://localhost:5062/api/Tags')
  .then(response => {
      console.log(response.data);
  })
  .catch(error => {
      console.error('There was an error making the request:', error);
  });

TEST CHANGES:
9. Testing Your Changes
A. Save your changes and restart your API (dotnet run).
B. Use your Angular app or a tool like Postman to test the API endpoints.
C. Open the browser's developer tools (Network tab) to ensure the API response includes the Access-Control-Allow-Origin header.

DEBUGGING:
10. Ensure the Angular dev server (http://localhost:4200) matches the WithOrigins value in your CORS policy.
11. Check the browser's developer tools (Network tab) to confirm that the 
A. ...Access-Control-Allow-Origin header is present in the API response.
B. Once properly configured, the CORS error should no longer appear, and your Angular app should
C. ... successfully communicate with the .NET MVC API.

HANDLE CORS HEADERS AT THE CONTROLLER LEVEL (NOT RECOMMENDED!)
6. However, if you want to apply CORS headers at the controller level (for specific APIs), 
A. ... you can do so using attributes or middleware.
7. To add CORS Headers at the Controller Level:
NOTE: This approach isn’t ideal because:
-It requires you to repeat code for every action method.
-It doesn’t handle preflight (OPTIONS) requests automatically.
8. If you need to allow specific origins or customize CORS settings for just one controller, follow these steps:
Using [EnableCors] Attribute

You can use the EnableCors attribute on a specific controller or action method.

    Import the Required Namespace: Add this at the top of your controller file:

using Microsoft.AspNetCore.Cors;

Apply [EnableCors] to the Controller or Method: Add the EnableCors attribute and specify the policy or rules directly:

[ApiController]
[Route("api/[controller]")]
[EnableCors("AllowSpecificOrigin")] // Matches the global policy defined in Startup.cs
public class TagsController : ControllerBase
{
    [HttpGet]
    public IActionResult GetTags()
    {
        return Ok(new string[] { "Tag1", "Tag2", "Tag3" });
    }
}

If you don’t have a global policy or want custom rules for this controller:

    [ApiController]
    [Route("api/[controller]")]
    [EnableCors] // Specify rules directly
    public class TagsController : ControllerBase
    {
        [HttpGet]
        [EnableCors("AllowSpecificOrigin")] // Optionally apply to a single action
        public IActionResult GetTags()
        {
            return Ok(new string[] { "Tag1", "Tag2", "Tag3" });
        }
    }

3. Manually Set CORS Headers (Not Recommended)

If you want to manually set CORS headers directly in the controller (not using middleware), you can modify the response in the action method:

[ApiController]
[Route("api/[controller]")]
public class TagsController : ControllerBase
{
    [HttpGet]
    public IActionResult GetTags()
    {
        var response = new JsonResult(new string[] { "Tag1", "Tag2", "Tag3" });
        Response.Headers.Add("Access-Control-Allow-Origin", "http://localhost:4200"); // Replace with your Angular app's origin
        Response.Headers.Add("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
        Response.Headers.Add("Access-Control-Allow-Headers", "Content-Type");

        return response;
    }
}







